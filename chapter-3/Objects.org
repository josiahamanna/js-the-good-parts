1. JavaScript includes a prototype linkage feature that allows one object to inherit the properties of another.
2. When used well, this can reduce object initialization time and memory consuption.

    #+BEGIN_SRC JavaScript
    var empty_object = {};

    var stooge = {
        "first-name": "Jerome",
        "last-name": "Howard"
    }
    #+END_SRC

3. Nesting objects
    #+BEGIN_SRC JavaScript
    var flight = {
        airline: "Oceanic",
        number: 815,
        departure: {
            IATA: "SYD",
            time: "2004-09-22 14:55",
            city: "Sydney"
        },
        arrival: {
            IATA: "LAX",
            time: "2004-09-23 10:42",
            city: "Los Angeles"
        }
    }
    #+END_SRC

4. Attempting to retrieve values from undefined will throw a TypeError exception.
   This can be guarded against with the && operator.
    #+BEGIN_SRC JavaScript
    flight.equipment // undefined
    flight.equipment.model // throw "TypeError"
    flight.equipment && flight.equipment.model // undefined
    #+END_SRC

5. Value of object can be updated by assignment.
   If the property name already exists in the object, the property value is replaced.
    #+BEGIN_SRC JavaScript
    stooge['first-name'] = "Jerome";
    #+END_SRC
   If the object does not already have that property name, the object is augmented:
    #+BEGIN_SRC JavaScript
    stooge['middle-name'] = "Lester";
    stooge.nickname = "Curly";
    flight.equipment = {
        model: "Boeing 777"
    };
    flight.status = "overdue";
    #+END_SRC

6. Objects are passed around by reference. They are never copied.
    #+BEGIN_SRC JavaScript
    var x = stooge;
    x.nickname = 'Curly';
    var nick = stooge.nickname;
        // nick is 'Curly' becuase x and stooge
        // are references to the same object
    a = b = c = {};
        // a, b and c all refer to
        // the same empty object
    #+END_SRC